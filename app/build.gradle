plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
    id 'checkstyle'
}

// Checkstyle configuration (Javadoc enforcement)
checkstyle {
    toolVersion = '10.12.4'
    configFile = file("$projectDir/checkstyle.xml")
    ignoreFailures = false
}

tasks.withType(Checkstyle).configureEach { t ->
    reports {
        xml.required = true
        html.required = true
    }
}

// --- ktlint (warning-only) without Gradle plugin portal ---
configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:1.3.1"
}

tasks.register('ktlintCheck', JavaExec) {
    group = "verification"
    description = "Run ktlint on Kotlin sources (warning-only)"
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    // Check Kotlin sources in this module
    args = [
            "--reporter=plain",
            "--relative",
            "src/**/*.kt"
    ]
    // Keep builds green for now; CI step will be continue-on-error too
    ignoreExitValue = true
}

tasks.register('ktlintFormat', JavaExec) {
    group = "formatting"
    description = "Auto-format Kotlin sources with ktlint"
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args = [
            "-F",
            "--relative",
            "src/**/*.kt"
    ]
}

// Apply local signing config only if present (prevents CI dependency on local files)
if (file('../signing.gradle').exists()) {
    apply from: '../signing.gradle'
}

class Scrambler {
    Random random = new Random()
    String getRandomString(int i) {
        return random.with {(1..(6 + random.nextInt(i))).collect {(('a'..'z')).join()[ nextInt((('a'..'z')).join().length())]}.join()}
    }
}

Scrambler scrambler = new Scrambler()
def randomLabel = scrambler.getRandomString(10).toUpperCase()

android {
    compileSdk = 36

    // CRITICAL: compileSdkVersion must be specified first

    namespace = rootProject.ext.packageName
    ndkVersion = rootProject.ext.ndkVersion


    signingConfigs {
        release { /* created early so buildTypes can reference it; configured in signing.gradle */ }
        debug {
            // Use Android debug keystore for debug builds
            def debugKeystorePath = System.getProperty('user.home') + '/.android/debug.keystore'
            def windowsDebugPath = System.getProperty('user.home') + '\\.android\\debug.keystore'

            if (file(debugKeystorePath).exists() || file(windowsDebugPath).exists()) {
                def keystoreFile = file(debugKeystorePath).exists() ?
                        file(debugKeystorePath) : file(windowsDebugPath)

                storeFile = keystoreFile
                storePassword = 'android'
                keyAlias = 'androiddebugkey'
                keyPassword = 'android'
                enableV1Signing = true
                enableV2Signing = true
                println "✅ Debug signing configured with Android debug keystore"
            } else {
                println "⚠️  Android debug keystore not found, using default signing"
            }
        }
    }
    lint {
        abortOnError = false
        checkReleaseBuilds = false
        baseline = file("lint-baseline.xml")
        disable 'StringFormatMatches', 'StringFormatInvalid'
    }

    defaultConfig {
        applicationId = rootProject.ext.packageName
        minSdk = 28
        //noinspection OldTargetApi
        targetSdk = 35
        versionCode = rootProject.ext.versionCode
        versionName = rootProject.ext.versionName

        vectorDrawables {
            useSupportLibrary = true
        }
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters += "arm64-v8a"
        }
        multiDexEnabled = false
    }


  buildTypes {
        release {
            // R8 OPTIMIZATION & OBFUSCATION SETTINGS
            minifyEnabled = true
            shrinkResources = true
            multiDexEnabled = false
            debuggable = false
            jniDebuggable = false
            zipAlignEnabled = true

            // SIGNING CONFIGURATION
            signingConfig = signingConfigs.release

            // R8 CONFIGURATION FILES
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // BUILD OPTIMIZATIONS
            // App label for release builds
            resValue "string", "app_name", randomLabel

            // ADDITIONAL SECURITY SETTINGS
            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "String", "BUILD_TYPE", '"release"'

            // BEAR-LOADER DOWNLOAD MANAGER CONFIG
            buildConfigField "boolean", "ENABLE_DOWNLOAD_LOGGING", "false"
            buildConfigField "int", "MAX_CONCURRENT_DOWNLOADS", "3"
            buildConfigField "long", "DOWNLOAD_TIMEOUT_MS", "300000L"  // 5 minutes
            buildConfigField "String[]", "SUPPORTED_GAMES", "{\"com.tencent.ig\", \"com.pubg.krmobile\", \"com.reko.pubgm\", \"com.vng.pubgmobile\", \"com.battlegroundmobile.india\"}"


        }

        debug {
            // Fast, unobfuscated debug builds
            minifyEnabled = false
            shrinkResources = false
            multiDexEnabled = true
            debuggable = true

            signingConfig = signingConfigs.debug
            // No proguardFiles needed when minifyEnabled=false

            // App label for debug builds
            resValue "string", "app_name", randomLabel

            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "String", "BUILD_TYPE", '"debug"'

            // Developer-friendly defaults
            buildConfigField "boolean", "ENABLE_DOWNLOAD_LOGGING", "true"
            buildConfigField "int", "MAX_CONCURRENT_DOWNLOADS", "2"
            buildConfigField "long", "DOWNLOAD_TIMEOUT_MS", "180000L"
            buildConfigField "String[]", "SUPPORTED_GAMES", "{\"com.tencent.ig\", \"com.pubg.krmobile\", \"com.reko.pubgm\", \"com.vng.pubgmobile\", \"com.battlegroundmobile.india\"}"
        }
    }



    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.addAll(["-Xlint:unchecked", "-Xlint:deprecation"])
    }

    task validateJNI(type: Exec) {
        // Try different Python executables in order of preference
        def pythonCommands = ["python3", "python", "C:\\Python313\\python.exe", "C:\\Python313\\Scripts\\python.exe"]
        def pythonCmd = "python3" // default fallback
        
        // Find the first available Python executable
        for (String cmd : pythonCommands) {
            try {
                def result = exec {
                    commandLine cmd, "--version"
                    ignoreExitValue = true
                    standardOutput = new ByteArrayOutputStream()
                    errorOutput = new ByteArrayOutputStream()
                }
                if (result.exitValue == 0) {
                    pythonCmd = cmd
                    break
                }
            } catch (Exception ignored) {
                // Continue to next command
            }
        }
        
        commandLine pythonCmd, "${project.rootDir}/jni_validator.py", "${project.rootDir}"
        ignoreExitValue = true
        
        doFirst {
            logger.info("Running JNI validation with: ${pythonCmd}")
        }
    }

    tasks.withType(JavaCompile).configureEach {
        finalizedBy validateJNI
    }


    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += ['-opt-in=kotlin.RequiresOptIn']
    }

    testOptions {
        unitTests {
            // Allow Android framework calls to return default values in local JVM tests
            returnDefaultValues = true
            includeAndroidResources = false
        }
    }
}

// Configuration-cache-safe variant hooks using androidComponents
androidComponents {
    onVariants(selector().all()) { variant ->
        // Rename APK outputs with timestamp without capturing variant objects in task graph
        variant.outputs.forEach { output ->
            def timestamp = new Date().format("yyyyMMddHHmmssSSS")
            output.outputFileName.set("${variant.applicationId.get()}-${variant.buildType}-${timestamp}.apk")
        }
        // Register a configuration-cache-safe copy task and finalize assemble with it
        def buildTypeName = variant.buildType
        def mappingFileProvider = layout.buildDirectory.file("outputs/mapping/${buildTypeName}/mapping.txt")
        def proguardDir = layout.projectDirectory.dir("proguard")
        def copyTaskProvider = tasks.register("copy${variant.name.capitalize()}Mapping", Copy) { t ->
            // Only run if mapping exists
            onlyIf { mappingFileProvider.get().asFile.exists() }
            from(mappingFileProvider)
            into(proguardDir)
        }
        // Use variant.artifacts to find assemble task name without assembleProvider (older AGP)
        def assembleTaskName = "assemble${variant.name.capitalize()}"
        tasks.matching { it.name == assembleTaskName }.configureEach { finalizedBy(copyTaskProvider) }
    }
}



// Signing configuration is now inline in android block above
// apply from: '../signing.gradle'  // Disabled - using inline configuration

// BlackObfuscator configuration - Disabled for AGP 8.1 compatibility
// The Transform API has been removed in AGP 8.1, so obfuscation plugins need updates
// TODO: Re-enable when compatible versions are available
/*
// Enable BlackObfuscator only for release builds
BlackObfuscator {
    enabled = (gradle.startParameter.taskNames.any { it.toLowerCase().contains('release') })
    depth = 2
    obfClass = [
        'com.bearmod.activity',
        'com.bearmod.auth',
        'com.bearmod.utils'
    ]
    blackClass = [
        'com.bearmod.Floating',
        'com.bearmod.Launcher'
    ]
}
*/


dependencies {
    // Core dependencies
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "androidx.multidex:multidex:2.0.1"

    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.viewpager:viewpager:1.1.0'
    implementation 'androidx.fragment:fragment-ktx:1.8.9'
    implementation 'androidx.viewpager2:viewpager2:1.1.0'
    implementation 'androidx.exifinterface:exifinterface:1.4.1'
    implementation 'androidx.activity:activity-ktx:1.10.1'
    implementation 'androidx.annotation:annotation:1.9.1'

    // Animation libraries
    implementation 'androidx.dynamicanimation:dynamicanimation-ktx:1.1.0'
    implementation 'androidx.interpolator:interpolator:1.0.0'

    // Networking dependencies for KeyAuth
    implementation 'com.squareup.retrofit2:retrofit:3.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:3.0.0'
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.1.0'
    implementation 'com.google.code.gson:gson:2.13.1'

    // Security dependencies
    implementation 'androidx.security:security-crypto:1.1.0'
    implementation 'androidx.core:core-ktx:1.17.0'

       // Enhanced file operations
    implementation 'commons-io:commons-io:2.20.0'

    // Mundo container integration
  //  implementation project(':mundo_core')

    // Instrumentation testing (androidTest)
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:5.1.0'
}
